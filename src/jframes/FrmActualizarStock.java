
package jframes;

import conexion.Conexion;
import controlador.ctrlProducto;
import java.awt.Dimension;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JComboBox;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import java.sql.Statement;
import modelo.Producto;


public class FrmActualizarStock extends javax.swing.JInternalFrame {
    
    int id_producto;
    int stock;

   
    public FrmActualizarStock() {
        initComponents();
        
        setTitle("Actualizar Stock de los Productos");
        setSize(new Dimension(400, 300));
        
        CargarComboProductos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_cantidad_actual = new javax.swing.JTextField();
        txt_cantidad_nueva = new javax.swing.JTextField();
        jComboBox_producto = new javax.swing.JComboBox<>();
        btnActualizar = new javax.swing.JButton();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(95, 47, 35));
        jLabel1.setFont(new java.awt.Font("Montserrat", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(95, 47, 35));
        jLabel1.setText("Actualizar Stock de Productos");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, -1, -1));

        jLabel2.setBackground(new java.awt.Color(95, 47, 35));
        jLabel2.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(95, 47, 35));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Producto:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 100, -1));

        jLabel3.setBackground(new java.awt.Color(95, 47, 35));
        jLabel3.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(95, 47, 35));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Stock Actual:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, 100, -1));

        jLabel4.setBackground(new java.awt.Color(95, 47, 35));
        jLabel4.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(95, 47, 35));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Stock Nuevo:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 100, -1));

        txt_cantidad_actual.setEditable(false);
        txt_cantidad_actual.setFont(new java.awt.Font("Montserrat", 0, 14)); // NOI18N
        txt_cantidad_actual.setEnabled(false);
        txt_cantidad_actual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cantidad_actualActionPerformed(evt);
            }
        });
        getContentPane().add(txt_cantidad_actual, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 170, -1));

        txt_cantidad_nueva.setFont(new java.awt.Font("Montserrat", 0, 14)); // NOI18N
        txt_cantidad_nueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cantidad_nuevaActionPerformed(evt);
            }
        });
        getContentPane().add(txt_cantidad_nueva, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 150, 170, -1));

        jComboBox_producto.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        jComboBox_producto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Producto:", "Item 2", "Item 3", "Item 4" }));
        jComboBox_producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_productoActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 170, -1));

        btnActualizar.setBackground(new java.awt.Color(95, 47, 35));
        btnActualizar.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        btnActualizar.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/files/actualizar.png"))); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, 170, 30));

        jLabel_wallpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/Fondo_ActualizarStock.jpg"))); // NOI18N
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 390, 270));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_cantidad_actualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cantidad_actualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cantidad_actualActionPerformed

    private void txt_cantidad_nuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cantidad_nuevaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cantidad_nuevaActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        //validamos seleccion del producto
    if (!jComboBox_producto.getSelectedItem().equals("Seleccione producto:")) {
        //Validamos campos vacios
        if (!txt_cantidad_nueva.getText().isEmpty()) {
            //validamos que el usuario no ingrese otros caracteres no numericos
            boolean validacion = validar(txt_cantidad_nueva.getText().trim());
            if (validacion == true) {
                //validar que la cantidad sea mayor cero (0)
                if (Integer.parseInt(txt_cantidad_nueva.getText()) > 0) {

                    Producto producto = new Producto();
                    ctrlProducto controlProducto = new ctrlProducto();
                    int stockActual = Integer.parseInt(txt_cantidad_actual.getText().trim());
                    int stockNuevo = Integer.parseInt(txt_cantidad_nueva.getText().trim());

                    stockNuevo = stockActual + stockNuevo;
                    producto.setStock(stockNuevo);
                    if (controlProducto.actualizarStock(producto, id_producto)) {
                        JOptionPane.showMessageDialog(null, 
                            "¡Stock actualizado correctamente!\n\n"
                            + "Producto: " + jComboBox_producto.getSelectedItem().toString() + "\n"
                            + "Nuevo stock: " + stockNuevo + " unidades",
                            "Actualización Exitosa",
                            JOptionPane.INFORMATION_MESSAGE);

                        jComboBox_producto.setSelectedItem("Seleccione producto:");
                        txt_cantidad_actual.setText("");
                        txt_cantidad_nueva.setText("");
                        this.CargarComboProductos();
                    } else {
                        JOptionPane.showMessageDialog(null, "Error al Actualizar Stock");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "La cantidad no puede ser cero ni negativa");
                }
            } else {
                JOptionPane.showMessageDialog(null, "En la cantidad no se admiten caracteres no numericos");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ingrese una nueva cantidad para sumar el stock del producto");
        }
    } else {
        JOptionPane.showMessageDialog(null, "Seleccione un producto");
    }                                                
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void jComboBox_productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_productoActionPerformed
        MostrarStock();

    }//GEN-LAST:event_jComboBox_productoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JComboBox<String> jComboBox_producto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JTextField txt_cantidad_actual;
    private javax.swing.JTextField txt_cantidad_nueva;
    // End of variables declaration//GEN-END:variables

 private void CargarComboProductos() {

        Connection cn = Conexion.getConnection();
        String sql = "select * from productos";
        Statement st;
        try {

            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_producto.removeAllItems();
            jComboBox_producto.addItem("Seleccione producto:");
            while (rs.next()) {
                jComboBox_producto.addItem(rs.getString("nombre"));
            }

        } catch (SQLException e) {
            System.out.println("Error al cargar los productos en: " + e);
        }

    }

    //metodo para mostrar stock del producto seleccionado
    private void MostrarStock() {
        try {
        Connection cn = Conexion.getConnection();
        String nombreProducto = (String) jComboBox_producto.getSelectedItem();

        String sql = "SELECT * FROM productos WHERE nombre = ?";
        PreparedStatement ps = cn.prepareStatement(sql);
        ps.setString(1, nombreProducto);

        ResultSet rs = ps.executeQuery();

        if (rs.next()) {
            id_producto = rs.getInt("id_producto");
            stock = rs.getInt("stock");
            txt_cantidad_actual.setText(String.valueOf(stock));
        } else {
            txt_cantidad_actual.setText("");
        }

        cn.close();
    } catch (SQLException e) {
        System.out.println("Error al obtener stock del producto en: " + e);
    }   
    
}
    
    //metodo de validacion de caracteres no numericos
    private boolean validar(String valor) {
        int num;
        try {
            num = Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    }

